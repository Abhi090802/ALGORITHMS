// DIJKSTRA'S ALGORITHM
// TC=O(V+E)LOG(V) AND SC=O(V+E)+O(V)+O(V) FOR ADJACENCY LIST,DIST ARRAY,PRIORITY QUEUE
#include<bits/stdc++.h>
using namespace std;
void dijkstra(int src,vector<vector<pair<int,int>>>graph,vector<int>&dist)
{
    dist[src]=0;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push({0,src});  // {wt,vertex}
    while(!pq.empty())
    {
        auto x=pq.top();
        pq.pop();
        for(auto it:graph[x.second])
        {
            if(dist[it.first]>dist[x.second]+it.second)
            {
                dist[it.first]=dist[x.second]+it.second;
                pq.push({dist[it.first],it.first});
            }
        }
    }
}
int main()
{
    int n,m; cin>>n>>m;
    vector<int>dist(n+1,INT_MAX);
    vector<vector<pair<int,int>>>graph(n+1);
    for(int i=0;i<m;i++)
    {
        int u,v,w; cin>>u>>v>>w;
        graph[u].push_back({v,w});
        graph[v].push_back({u,w});
    }
    int source; cin>>source;
    dijkstra(source,graph,dist);
    for(int i=1;i<=n;i++)
    {
        if(dist[i]!=INT_MAX)
        {
            cout<<dist[i]<<" ";
        }
        else cout<<-1<<" ";
    }
    return 0;
}
